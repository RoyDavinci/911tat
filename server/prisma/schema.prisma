generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  user_id         Int            @id @default(autoincrement())
  username        String         @db.VarChar(200)
  email           String         @unique @db.VarChar(200)
  phone           String?
  profilePhoto    String?
  password        String         @db.VarChar(200)
  accountStatus   Int            @default(1234567890)
  isVerified      Boolean        @default(false)
  escort_id       Int?           @unique
  client_id       Int?           @unique
  subscription_id Int?           @unique
  adminId         Int?           @unique
  subscribtions   subscribtions? @relation(fields: [subscription_id], references: [subscription_id])
  clients         client?        @relation(fields: [client_id], references: [client_id])
  escorts         escorts?       @relation(fields: [escort_id], references: [escort_id])
  admin           admin?         @relation(fields: [adminId], references: [id])
  transactions    transactions[]
  created_at      DateTime       @default(now())
  updated_at      DateTime?
}

model escorts {
  escort_id     Int       @id @default(autoincrement())
  email         String    @unique @db.VarChar(200)
  phone         String    @db.VarChar(200)
  username      String    @db.VarChar(200)
  city          String?   @db.VarChar(50)
  state         String?   @db.VarChar(50)
  country       String?   @db.VarChar(50)
  build         String?   @db.VarChar(20)
  height        String?   @db.VarChar(20)
  BustSize      String?   @db.VarChar(20)
  orientation   String?   @db.VarChar(20)
  anal          String?   @db.VarChar(20)
  oralSex       String?   @db.VarChar(20)
  condom        String?   @db.VarChar(20)
  smoke         String?   @db.VarChar(10)
  ethnicity     String?   @default("Black") @db.VarChar(10)
  age           String?   @db.VarChar(5)
  shortTimeRate String?   @db.VarChar(10)
  overNightRate String?   @db.VarChar(10)
  users         users?
  Images        Images[]
  created_at    DateTime  @default(now())
  updated_at    DateTime?
}

model client {
  client_id  Int       @id @default(autoincrement())
  email      String    @unique @db.VarChar(200)
  username   String    @db.VarChar(200)
  users      users?
  created_at DateTime  @default(now())
  updated_at DateTime?
}

model subscribtions {
  subscription_id Int       @id @default(autoincrement())
  months          String    @db.VarChar(100)
  user_id         Int
  users           users?
  created_at      DateTime  @default(now())
  updated_at      DateTime?
}

model admin {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  users     users?
  role      Role
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

model Images {
  imageId      Int       @id @default(autoincrement())
  images       String?   @db.VarChar(200)
  profileImage String?   @db.VarChar(100)
  userId       Int?
  escort       escorts?  @relation(fields: [userId], references: [escort_id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
}

enum Role {
  Super_Admin
  Admin
}

model transactions {
  transactionId         Int       @id @default(autoincrement())
  transaction_status    Status    @default(pending)
  phone                 String?
  email                 String
  amount                String
  payment_type          String
  biller_Reference      String
  transaction_reference String    @db.VarChar(50)
  userId                Int
  users                 users?    @relation(fields: [userId], references: [user_id])
  createdAt             DateTime  @default(now())
  updatedAt             DateTime?
}

enum Status {
  pending
  successful
  failed
}
